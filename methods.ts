import type { RequestStatus } from "./types.ts";

/** Get the result type of a method. */
export type Result<M extends keyof ApiMethods> = ReturnType<ApiMethods[M]>;

/** Get the parameters of a method. */
export type Params<M extends keyof ApiMethods> = Parameters<ApiMethods[M]>[0];

export interface ApiMethods {
  /**
   * Use this method to send a verification message. Charges will apply according to the pricing plan for each successful message delivery. Note that this method is always free of charge when used to send codes to your own phone number. On success, returns a { @link RequestStatus } object.
   *
   * > [See the tutorial for examples >](https://core.telegram.org/gateway/verification-tutorial#sending-auth-codes)
   */
  sendVerificationMessage(params: {
    /** The phone number to which you want to send a verification message, in the [E.164](https://en.wikipedia.org/wiki/E.164) format. */
    phone_number: string;
    /** The unique identifier of a previous request from { @link checkSendAbility }. If provided, this request will be free of charge. */
    request_id?: string;
    /** Username of the Telegram channel from which the code will be sent. The specified channel, if any, must be verified and owned by the same account who owns the Gateway API token. */
    sender_username?: string;
    /** The verification code. Use this parameter if you want to set the verification code yourself. Only fully numeric strings between 4 and 8 characters in length are supported. If this parameter is set, code_length is ignored. */
    code?: string;
    /** The length of the verification code if Telegram needs to generate it for you. Supported values are from 4 to 8. This is only relevant if you are not using the code parameter to set your own code. Use the checkVerificationStatus method with the code parameter to verify the code entered by the user. */
    code_length?: number;
    /** An HTTPS URL where you want to receive delivery reports related to the sent message, 0-256 bytes. */
    callback_url?: string;
    /** Custom payload, 0-128 bytes. This will not be displayed to the user, use it for your internal processes. */
    payload?: string;
    /** Time-to-live (in seconds) before the message expires. If the message is not delivered or read within this time, the request fee will be refunded. Supported values are from 30 to 3600. */
    ttl?: number;
  }): RequestStatus;

  /**
   * Use this method to optionally check the ability to send a verification message to the specified phone number. If the ability to send is confirmed, a fee will apply according to the pricing plan. After checking, you can send a verification message using the { @link sendVerificationMessage } method, providing the _request_id_ from this response.
   *
   * Within the scope of a _request_id_, only one fee can be charged. Calling { @link sendVerificationMessage } once with the returned _request_id_ will be free of charge, while repeated calls will result in an error. Conversely, calls that don't include a _request_id_ will spawn new requests and incur the respective fees accordingly. Note that this method is always free of charge when used to send codes to your own phone number.
   *
   * In case the message can be sent, returns a { @link RequestStatus } object. Otherwise, an appropriate error will be returned.
   *
   * > [See the tutorial for examples >](https://core.telegram.org/gateway/verification-tutorial#sending-auth-codes)
   */
  checkSendAbility(params: {
    /** The phone number for which you want to check our ability to send a verification message, in the [E.164](https://en.wikipedia.org/wiki/E.164) format. */
    phone_number: string;
  }): RequestStatus;

  /**
   * Use this method to check the status of a verification message that was sent previously. If the code was generated by Telegram for you, you can also verify the correctness of the code entered by the user using this method. Even if you set the code yourself, it is recommended to call this method after the user has successfully entered the code, passing the correct code in the code parameter, so that we can track the conversion rate of your verifications. On success, returns a { @link RequestStatus } object.
   *
   * > [See the tutorial for examples >](https://core.telegram.org/gateway/verification-tutorial#checking-the-authorization-status)
   */
  checkVerificationStatus(params: {
    /** The unique identifier of the verification request whose status you want to check. */
    request_id: string;
    /** The code entered by the user. If provided, the method checks if the code is valid for the relevant request. */
    code?: string;
  }): RequestStatus;

  /** Use this method to revoke a verification message that was sent previously. Returns True if the revocation request was received. However, this does not guarantee that the message will be deleted. For example, if the message has already been delivered or read, it will not be removed. */
  revokeVerificationMessage(params: {
    /** The unique identifier of the request whose verification message you want to revoke. */
    request_id: string;
  }): true;
}
