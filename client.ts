import type { ApiMethods, Params, Result } from "./methods.ts";

export type Other<
  M extends keyof ApiMethods,
  X extends keyof Params<M>,
> = Omit<Params<M>, X>;

export class GatewayError extends Error {
  constructor(message: string) {
    super(message);
    this.name = "GatewayError";
  }
}

export interface GatewayParams {
  baseUrl?: string;
  fetch?: typeof globalThis.fetch;
}

/** A Telegram Gateway API client. */
export class Gateway {
  #accessToken: string;
  #baseUrl: string;
  #fetch: typeof globalThis.fetch;

  /**
   * @param accessToken An access token to the Gateway API.
   * @param fetch Additional parameters.
   */
  constructor(accessToken: string, params?: GatewayParams) {
    this.#accessToken = accessToken;
    this.#baseUrl = params?.baseUrl ?? "https://gatewayapi.telegram.org/";
    this.#fetch = params?.fetch ?? fetch;
  }

  get accessToken(): string {
    return this.#accessToken;
  }

  async #request<M extends keyof ApiMethods>(
    method: M,
    params: Params<M>,
    signal: AbortSignal | undefined,
  ) {
    const url = new URL(method, this.#baseUrl);
    url.searchParams.set("access_token", this.#accessToken);
    Object.entries(params).forEach(([name, value]) => {
      url.searchParams.set(name, String(value));
    });
    const response = await this.#fetch(url, { signal });
    const data: { ok: true; result: Result<M> } | { ok: false; error: string } =
      await response.json();
    if (data.ok) {
      return data.result;
    } else {
      throw new GatewayError(data.error);
    }
  }

  /**
   * Use this method to send a verification message. Charges will apply according to the pricing plan for each successful message delivery. Note that this method is always free of charge when used to send codes to your own phone number. On success, returns a { @link RequestStatus } object.
   *
   * > [See the tutorial for examples >](https://core.telegram.org/gateway/verification-tutorial#sending-auth-codes)
   *
   * @param phone_number The phone number to which you want to send a verification message, in the [E.164](https://en.wikipedia.org/wiki/E.164) format.
   * @param other Additional parameters.
   * @param signal Optional `AbortSignal` to cancel the request.
   */
  sendVerificationMessage(
    phone_number: string,
    other?: Other<"sendVerificationMessage", "phone_number">,
    signal?: AbortSignal,
  ): Promise<Result<"sendVerificationMessage">> {
    return this.#request(
      "sendVerificationMessage",
      { ...other, phone_number },
      signal,
    );
  }

  /**
   * Use this method to optionally check the ability to send a verification message to the specified phone number. If the ability to send is confirmed, a fee will apply according to the pricing plan. After checking, you can send a verification message using the { @link sendVerificationMessage } method, providing the _request_id_ from this response.
   *
   * Within the scope of a _request_id_, only one fee can be charged. Calling { @link sendVerificationMessage } once with the returned _request_id_ will be free of charge, while repeated calls will result in an error. Conversely, calls that don't include a _request_id_ will spawn new requests and incur the respective fees accordingly. Note that this method is always free of charge when used to send codes to your own phone number.
   *
   * In case the message can be sent, returns a { @link RequestStatus } object. Otherwise, an appropriate error will be returned.
   *
   * > [See the tutorial for examples >](https://core.telegram.org/gateway/verification-tutorial#sending-auth-codes)
   *
   * @param phone_number The phone number for which you want to check our ability to send a verification message, in the [E.164](https://en.wikipedia.org/wiki/E.164) format.
   * @param signal Optional `AbortSignal` to cancel the request.
   */
  checkSendAbility(
    phone_number: string,
    signal?: AbortSignal,
  ): Promise<Result<"checkSendAbility">> {
    return this.#request("checkSendAbility", { phone_number }, signal);
  }

  /**
   * Use this method to check the status of a verification message that was sent previously. If the code was generated by Telegram for you, you can also verify the correctness of the code entered by the user using this method. Even if you set the code yourself, it is recommended to call this method after the user has successfully entered the code, passing the correct code in the code parameter, so that we can track the conversion rate of your verifications. On success, returns a { @link RequestStatus } object.
   *
   * > [See the tutorial for examples >](https://core.telegram.org/gateway/verification-tutorial#checking-the-authorization-status)
   *
   * @param request_id The unique identifier of the verification request whose status you want to check.
   * @param code The code entered by the user. If provided, the method checks if the code is valid for the relevant request.
   * @param signal Optional `AbortSignal` to cancel the request.
   */
  checkVerificationStatus(
    request_id: string,
    code?: string,
    signal?: AbortSignal,
  ): Promise<Result<"checkVerificationStatus">> {
    return this.#request(
      "checkVerificationStatus",
      { request_id, code },
      signal,
    );
  }

  /**
   * Use this method to revoke a verification message that was sent previously. Returns True if the revocation request was received. However, this does not guarantee that the message will be deleted. For example, if the message has already been delivered or read, it will not be removed.
   *
   * @param request_id The unique identifier of the request whose verification message you want to revoke.
   * @param signal Optional `AbortSignal` to cancel the request.
   */
  revokeVerificationMessage(
    request_id: string,
    signal?: AbortSignal,
  ): Promise<Result<"revokeVerificationMessage">> {
    return this.#request("revokeVerificationMessage", { request_id }, signal);
  }
}
